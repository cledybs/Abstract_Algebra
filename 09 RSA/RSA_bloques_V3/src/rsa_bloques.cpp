#include "rsa_bloques.h"
random op;
rsa_bloques::rsa_bloques(int bits){///Receptor
    ///*
    //p=conv<ZZ>("116392169431889610812057559048578059851819452679538223557873114371623702861632886362132309798941624758818954799539051248194871125611862571617124313250123978312750036779646706593551448631068915189467445175511195942904849280430621049860387420606295281370323929429324122814212181642868936837093363501896708497431");
    //q=conv<ZZ>("135730484312091421803594051580244147075537286062899513100406435443797320416080886058762796596740646082163255766665258354739632478234198216010038451581142506545162787637718057721118027379695029627514936027497979815865520110765657929031527899440364581805646256708287689553033446989260099150570805845698263614571");
    //e = conv<ZZ>("118831771744614267884036168004006690066504645352011370129391916764391780293048861973550184496682081579622056644769615336918162659304713710594754645459116635721407805930018503066008815302178554106599701452495570354353770312280468040655537534370080874682166156791589728565770080678017522614928691686579641699591");// */
    p=conv<ZZ>("23077427482270741887562253910278018951017623418228767519409545036653859663541676555691310447040623544464232031907190444703809377118934085334719835083100319227958829798759763771120044265538514759990978641096960591955604264465712890720430276540936333247464348270644129448348362287897028410131093148075228274424518854876865877303562840753153017903187114778413681692352065284234473438950443754971672482558806274182439789508428919718631258662940937644773789102791909465581019888234074245235202641559572578789751579190734830536595808599994837952066883760353500343943417956323154547543830768809937280883328200211828188209867");
    q=conv<ZZ>("26887196192047532524776627244798518906678807926955237584497738323090377408700920274101817153203827296806792474974467711251255581686237214161230731746422412348027450735587230905931829352370389026322406884575884845762565931631165135549691408626588453414760741049440573799847073356783295166922996009874841203560088860824808785455004405025118813671212188143417363345945368672186515207309462565814402755271200982670839499669392257328025488076139020355113461377768875460803227512371011746642388534843118169266604096473833435721495878219398980753149004279086969046584288345821500769065258788776477670198351031241430723825787");
    e = conv<ZZ>("18516734073349654206175279298211034752022377857357878482926173534655605805246992010180526535161602831531941442753762334289083418012247635957011557472259207610445703294490042831478542421412747668640209287307469899746503654907324066398339793775386012088485434207969621027254880235377244005487453915317525652147292989945855483755979809481613027427658589614945631180100152630304968274945046044154477348086424324738733476449370884325893953698473843412902260506197819704055965055318742394226175274367414379154884790617058302252650297368832506258026225945204346665098096955842456128832491889890046079499778091395366410914515");
/*
    p=gen_prime(op.generate_random(bits));
    q=gen_prime(op.generate_random(bits));//*/
    n=p*q;
    PhiN = (p - 1) * (q - 1);
/*
   do{
       e=op.generate_random(2048);
   }while(!Existe_Inversa(e,PhiN));//*/
    d=inversa(e, PhiN);
    cout<<"VALORES \n\nn: "<<n<<"\n\ne: "<<e<<endl;
    cout<<"\n\np: "<<p<<"\n\nq: "<<q<<"\n\nPhi: "<<PhiN<<"\n\nd: "<<d<<endl;
}

rsa_bloques::rsa_bloques(ZZ n,ZZ e){
    this->n=n;
    this->e=e;
    //cout<<"VALORES \n\nn: "<<n<<"\n\ne: "<<e<<endl;
}

string rsa_bloques::encrypt(string mensaje){
    int digit=to_string(alfabeto.size()).size();
    string str;
    string cero(digit,'0');
    for(int i=0;i<mensaje.size();i++){
        size_t pos=alfabeto.find(mensaje.at(i));
        int len=to_string(pos).size();
        if(len<digit) str+=cero.substr(0,digit-len);
        str+=to_string(pos);
    }
    digit=ZZtoStr(n).size()-1;
    while(modint(str.size(),digit)) str+="22";
    int digitN=digit+1;
    string out;
    for(int i=0;i<str.size();i+=digit){
        ZZ p(conv<ZZ>(str.substr(i,digit).c_str()));
        p= Power_mod(p, e, n);
        string ceros((digitN-ZZtoStr(p).size()),'0');
        out=out+ceros+ZZtoStr(p);
    }
    return out;
}

string rsa_bloques::decrypt(string mensaje){
    string salida;
    int digitN=ZZtoStr(n).size();
    int digit=digitN-1;
    for(int i=0;i<mensaje.size();i+=digitN){
        ZZ c(conv<ZZ>(mensaje.substr(i,digitN).c_str()));
        c= TRC(c);
        string ceros((digit-ZZtoStr(c).size()),'0');
        salida+=ceros+ZZtoStr(c);
    }
    digit=to_string(alfabeto.size()).size();
    string outLetters;
    for(int i=0;i<salida.size();i+=digit){
        outLetters+=alfabeto.at(stoi(salida.substr(i,digit)));
    }
    return outLetters;
}

string rsa_bloques::ZZtoStr(ZZ z){
    stringstream ss;
    ss<<z;
    return ss.str();
}

ZZ rsa_bloques::TRC(ZZ M){
    ZZ q1= inversa(modulo(q, p), p);
    ZZ a1= Power_mod(modulo(M, p), modulo(d, p - 1), p);//Dp,dp,p
    ZZ q2= inversa(modulo(p, q), q);
    ZZ a2= Power_mod(modulo(M, q), modulo(d, q - 1), q);
    return modulo(modulo(a1 * q * q1, n) + modulo(a2 * p * q2, n), n);
}
